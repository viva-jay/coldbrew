steps:
#  - name: gcr.io/$PROJECT_ID/docker-compose
#    env:
#      - 'K6_CLOUD_TOKEN=${_K6_CLOUD_TOKEN}'
#    args: ['run',
#           'k6',
#           'run',
#           '--no-connection-reuse',
#           '--insecure-skip-tls-verify',
#           '--no-teardown',
#           '--no-thresholds',
#           '--no-setup',
#           '--no-usage-report',
#           '--quiet',
#           '--out',
#           'cloud',
#           '/scripts/script.js']

#  - name: gcr.io/$PROJECT_ID/gcloud


  # build nginx docker image
  - name: 'gcr.io/$PROJECT_ID/docker'
    args: [
        'build',
        '-t', 'gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME',
        '.'
    ]
    id: 'build-nginx'
  # build app docker image
  # deploy nginx instance
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        gcloud compute instances create-with-container ${_SERVICE_NAME}-$BUILD_ID --quiet \
              --zone=us-west1-b \
              --machine-type=e2-micro \
              --image-project=cos-cloud \
              --image-family=cos-97-lts \
              --container-image=gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME \
              --container-mount-host-path=host-path=/var/nginx.conf,mount-path=/etc/nginx/nginx.conf,mode=ro \
              --container-restart-policy=always \
              --tags ${_SERVICE_NAME}-test
    waitFor: ['build-nginx']

#  - name: 'gcr.io/cloud-builders/gcloud'
#    entrypoint: /bin/bash
#    args:
#      - '-c'
#      - |
#        gcloud run deploy ${_SERVICE_NAME}-$BUILD_ID \
#          --image gcr.io/$PROJECT_ID/mock-server \
#          --region ${_REGION} \
#          --ingress=internal \
#          --port=80 \
#          --min-instances=2 \
#          --timeout=10s
# store artifact
images: ['gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME']
# arguments
substitutions:
  _SERVICE_NAME: 'tiny-proxy'
  _REGION: 'asia-northeast2'