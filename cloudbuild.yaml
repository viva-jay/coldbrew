steps:
#  - name: gcr.io/$PROJECT_ID/docker-compose
#    env:
#      - 'K6_CLOUD_TOKEN=${_K6_CLOUD_TOKEN}'
#    args: ['run',
#           'k6',
#           'run',
#           '--no-connection-reuse',
#           '--insecure-skip-tls-verify',
#           '--no-teardown',
#           '--no-thresholds',
#           '--no-setup',
#           '--no-usage-report',
#           '--quiet',
#           '--out',
#           'cloud',
#           '/scripts/script.js']

  # Build the container image

  # Pull nginx image for cache
  - name: gcr.io/cloud-builders/docker
    entrypoint: bash
    args:
      - '-c'
      - >-
        docker pull gcr.io/cloud-marketplace/google/nginx:1.20
        docker images
        || exit 0
  # Tag the image we pulled in the previous step as a cache.
  - name: gcr.io/cloud-builders/docker
    args: [
        tag,
        '-t', 'gcr.io/$PROJECT_ID/mock-server:$BRANCH_NAME',
        '--cache-from', 'gcr.io/cloud-marketplace/google/nginx:1.20',
        'gcr.io/cloud-marketplace/google/nginx:1.20']

  # Push the container image to Container Registry
  - name: gcr.io/cloud-builders/docker
    args: ['push', 'gcr.io/$PROJECT_ID/mock-server:$BRANCH_NAME']

  # Deploy container image to Cloud Run
#  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
#    entrypoint: gcloud
#    args:
#      - 'run'
#      - 'deploy'
#      - 'SERVICE-NAME'
#      - '--image'
#      - 'gcr.io/$PROJECT_ID/SERVICE-NAME:$COMMIT_SHA'
#      - '--region'
#      - 'REGION'
# store artifact
images:
  - 'gcr.io/$PROJECT_ID/mock-server:$COMMIT_SHA'