steps:
#  - name: gcr.io/$PROJECT_ID/docker-compose
#    env:
#      - 'K6_CLOUD_TOKEN=${_K6_CLOUD_TOKEN}'
#    args: ['run',
#           'k6',
#           'run',
#           '--no-connection-reuse',
#           '--insecure-skip-tls-verify',
#           '--no-teardown',
#           '--no-thresholds',
#           '--no-setup',
#           '--no-usage-report',
#           '--quiet',
#           '--out',
#           'cloud',
#           '/scripts/script.js']

#  - name: gcr.io/$PROJECT_ID/gcloud
  - name: gcr.io/cloud-builders/mvn:3.5.0-jdk-8
    entrypoint: bash
    args:
      - -c
      - |
        whoami
        echo $$HOME
        pwd
        ls -la
        cat $$HOME/.docker/config.json
        set

  # build nginx docker image
#  - name: 'gcr.io/$PROJECT_ID/docker'
#    args: [
#        'build',
#        '-t', 'gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME',
#        '.'
#    ]
#    id: 'build-nginx'
  # build app docker image
  - name: 'gcr.io/$PROJECT_ID/mvn'
    args: ['compile', 'jib:build']
    dir: 'core'
#  # deploy nginx instances
#  - name: 'gcr.io/cloud-builders/gcloud'
#    entrypoint: /bin/bash
#    args:
#      - '-c'
#      - |
#        gcloud compute instances create-with-container mock-server-1 mock-server-2 --quiet \
#              --zone=us-west1-b \
#              --machine-type=e2-micro \
#              --image-project=cos-cloud \
#              --image-family=cos-97-lts \
#              --container-image=gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME \
#              --container-restart-policy=always \
#              --tags ${_SERVICE_NAME}-test
#    waitFor: ['build-nginx']

# store artifact
#images: ['gcr.io/$PROJECT_ID/nginx:$BRANCH_NAME']
# arguments
substitutions:
  _SERVICE_NAME: 'tiny-proxy'
  _REGION: 'asia-northeast2'